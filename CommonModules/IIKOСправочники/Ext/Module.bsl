Функция ПолучитьЗаголовкиСCookie(ПП)
	CookieЗаголовки	= Новый Соответствие;
	CookieЗаголовки.Вставить("Cookie", ПП.IIKO_COOKIE);
	CookieЗаголовки.Вставить("Connection", "keep-alive");
	Возврат CookieЗаголовки;
КонецФункции

Функция ПолучитьСоответствиеСправочниковIIKO() Экспорт
	СМетодКлюч = Новый Соответствие;
	СМетодКлюч.Вставить("products", 		"Номенклатура");
	СМетодКлюч.Вставить("productGroups",	"ГруппыНоменклатуры");
	СМетодКлюч.Вставить("units", 			"ЕдиницыИзмерения");
	СМетодКлюч.Вставить("stores", 			"Склады");
	СМетодКлюч.Вставить("suppliers", 		"Поставщики");
	СМетодКлюч.Вставить("departments", 		"Подразделения");
	СМетодКлюч.Вставить("expenseAccounts", 	"СтатьиРасходов");
	СМетодКлюч.Вставить("createProduct", 	"СозданиеНоменклатуры");
	СМетодКлюч.Вставить("entities", 		"Справочники");
	Возврат СМетодКлюч;
КонецФункции

Функция ПолучитьВерсиюОбъекта(ПП) Экспорт
	МассивОтвета = ВыполнитьНаСервереАйко("MS","НомерОбъекта",,ПП);
	
	Если МассивОтвета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МассивОтвета.Количество()>0 Тогда
		Возврат МассивОтвета[0].Получить("res");
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьSQLIiko(ТипБД, ТипЗапроса)
	ЗапросSQL = Новый Запрос("ВЫБРАТЬ
	                         |	IIKOSQLЗапросы.Текст КАК Текст,
	                         |	IIKOSQLЗапросы.Поля КАК Поля
	                         |ИЗ
	                         |	РегистрСведений.IIKOSQLЗапросы КАК IIKOSQLЗапросы
	                         |ГДЕ
	                         |	IIKOSQLЗапросы.ТипБД = &ТипБД
	                         |	И IIKOSQLЗапросы.ТипЗапроса = &ТипЗапроса");
	ЗапросSQL.УстановитьПараметр("ТипБД", ТипБД);
	ЗапросSQL.УстановитьПараметр("ТипЗапроса", ТипЗапроса);
	ТЗ = ЗапросSQL.Выполнить().Выгрузить();
	Если ТЗ.Количество()>0 Тогда
		Возврат Новый Структура("Текст, СтрокаПолей", ТЗ[0].Текст, ТЗ[0].Поля);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ВыполнитьНаСервереАйко(ТипБД, ТипЗапроса, СоответствиеПараметров=Неопределено, ПП) Экспорт// ПП - параметры подключения
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ЗапросКАйко = ПолучитьSQLIiko(ТипБД, ТипЗапроса);
	Если ЗапросКАйко <> Неопределено Тогда
		Попытка
			HTTPСоединение = Новый HTTPСоединение(ПП.IIKO_HOST, Число(ПП.IIKO_PORT));	
		Исключение
			ОбработкаДанных.ЗаписатьВЛог(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		Если ЗначениеЗаполнено(СоответствиеПараметров) Тогда
			SQLЗапрос = ЗапросКАйко.Текст;
			Для Каждого Параметр Из СоответствиеПараметров Цикл
				SQLЗапрос = СтрЗаменить(SQLЗапрос, "["+Строка(Параметр.Ключ)+"]", Параметр.Значение);
			КонецЦикла;
		Иначе
			SQLЗапрос = ЗапросКАйко.Текст;
		КонецЕсли;
		Попытка
			
			HTTPЗапрос = Новый HTTPЗапрос("/resto/service/maintance/sql.jsp?sql="+
											КодироватьСтроку(SQLЗапрос, СпособКодированияСтроки.КодировкаURL),
											ПолучитьЗаголовкиСCookie(ПП));
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос, ИмяФайла);
		Исключение
			ОбработкаДанных.ЗаписатьВЛог(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
		Если HTTPОтвет.КодСостояния = 200 Тогда
			ОтветМассивСоответствий = Новый Массив;
			Попытка
				МассивПолей = СтрРазделить(ЗапросКАйко.СтрокаПолей, ",");
				
				ЧтениеXml = Новый ЧтениеXML;
				ЧтениеXml.ОткрытьФайл(ИмяФайла);
				ЧтениеXml.Прочитать();			
				Пока ЧтениеXml.Прочитать() Цикл 
					Если ЧтениеXml.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
						Если ЧтениеXml.Имя = "row" Тогда
							ОтветСоответствие = Новый Соответствие;	
						Иначе
							Для Каждого ИмяПоля Из МассивПолей Цикл
								Если ЧтениеXml.Имя = ИмяПоля Тогда
									ЧтениеXml.Прочитать();
									ОтветСоответствие.Вставить(ИмяПоля, ЧтениеXml.Значение);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					ИначеЕсли ЧтениеXml.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXml.Имя = "row" Тогда
						ОтветМассивСоответствий.Добавить(ОтветСоответствие);
					КонецЕсли;
				КонецЦикла;
				ЧтениеXml.Закрыть();
			Исключение
				ОбработкаДанных.ЗаписатьВЛог("Не удалось прочитать XML-файл");
				Возврат Неопределено;
			КонецПопытки;
			Возврат ОтветМассивСоответствий;
		Иначе
			ОбработкаДанных.ЗаписатьВЛог("Сервер HTTP вернул ошибку "+HTTPОтвет.КодСостояния);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ОбработкаДанных.ЗаписатьВЛог("Неизвестный тип запроса "+ТипЗапроса);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Н.Путь
// Н.ИмяСущности
// Н.СтрокаЗначимыхПолей
Функция ПередатьXMLОбъектВАйко(СтруктураОбъекта, П, Итерация=0) Экспорт
	Н = ПолучитьПараметрыЗапросаКСерверуАйко(СтруктураОбъекта, П);
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();	
	
	HTTPСоединение = Новый HTTPСоединение(П.IIKO_HOST, Число(П.IIKO_PORT));
	ФайлДляЗапроса = КаталогВременныхФайлов+Н.ИмяСущности+"-request"+Итерация+".xml";
	
	Запись = Новый ЗаписьТекста(ФайлДляЗапроса, КодировкаТекста.UTF8);
	Запись.Записать(Н.XMLОбъекта);
	Запись.Закрыть();        
	ФайлОтправки = Новый Файл(ФайлДляЗапроса);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	ПутьМетода = Н.Путь+"?methodName="+СтруктураОбъекта.ИмяМетода;
	
	Попытка	
		HTTPЗапрос = Новый HTTPЗапрос(ПутьМетода);
		HTTPЗапрос.УстановитьИмяФайлаТела(ФайлДляЗапроса);
		HTTPЗапрос.Заголовки = ОбработкаДанных.ПолучитьHTTPЗаголовки(РазмерФайлаОтправки, П);
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ОбработкаДанных.ЗаписатьВЛог("Данные по документу отправлены в Айко.");
		Если HTTPОтвет.КодСостояния = 200 Тогда
			СписокЗП = ОбработкаДанных.ПолучитьСписокИзСтроки(Н.СтрокаЗначимыхПолей, ",");
			Возврат ОбработкаДанных.ОбработатьHTTPОтветIIKO(HTTPОтвет, СписокЗП);
		Иначе
			ОбработкаДанных.ЗаписатьВЛог("Сервер вернул ответ, отличный от успешного.");
			Возврат ОбработкаДанных.ОшибкаJ("Сервер HTTP вернул ошибку "+HTTPОтвет.КодСостояния);
		КонецЕсли;
	Исключение
		ОбработкаДанных.ЗаписатьВЛог(ИнформацияОбОшибке().Описание);
		Возврат ОбработкаДанных.ОшибкаJ(ИнформацияОбОшибке().Описание);
	КонецПопытки;
КонецФункции

// ВХОДНЫЕ ПАРАМЕТРЫ:
// СтруктураОбъекта - структура, сформированная из полученного JSON-пакета и дополнительных параметров
// П - параметры подключения
// ВОЗВРАЩАЕТ
//	Если тип метода определен, то
// 		Структуру Н с полями:
// 			Путь                - относительный URL до обработчика метода
//			ИмяСущности         - объект Айко, например entity
//			СтрокаЗначимыхПолей - поля ответного XML-пакета для проверки
//			XMLОбъекта 			- XML-пакет объекта для отправки на сервер Айко
//	Иначе
//		Неопределено
Функция ПолучитьПараметрыЗапросаКСерверуАйко(СтруктураОбъекта, П)
	
	Если СтруктураОбъекта.ИмяМетода = "createProduct" Тогда
		Путь 				= "/resto/services/products";
		ИмяСущности 		= "entity";
		СтрокаЗначимыхПолей = "returnValue,success,errorString,resultStatus";
		XMLОбъекта = ВернутьXMLНоменклатуры(СтруктураОбъекта, П);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат Новый Структура("Путь,ИмяСущности,СтрокаЗначимыхПолей,XMLОбъекта", Путь, ИмяСущности, СтрокаЗначимыхПолей, XMLОбъекта);
КонецФункции

Функция ПолучитьТекстИзXDTO(ОбъектXDTO)
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(Запись, ОбъектXDTO);
	Возврат Запись.Закрыть();
КонецФункции

Функция ВернутьXMLНоменклатуры(СтруктураНоменклатуры, П)
	// Инициализация уникального идентификатора
	ИдНоменклатуры = Строка(Новый УникальныйИдентификатор);
	// Заполнение имени номенклатуры
	ТипОбъектаИмяПродуктаАйко = ФабрикаXDTO.Тип("https://izi.cloud/iikopackage", "productName");
	ИмяПродуктаАйко = ФабрикаXDTO.Создать(ТипОбъектаИмяПродуктаАйко);
	ЗаполнитьЗначенияСвойств(ИмяПродуктаАйко, СтруктураНоменклатуры);
	// Заполнение полей продукта
	ТипОбъектаПродуктАйко = ФабрикаXDTO.Тип("https://izi.cloud/iikopackage", "product");
	ПродуктАйко = ФабрикаXDTO.Создать(ТипОбъектаПродуктАйко);
	ЗаполнитьЗначенияСвойств(ПродуктАйко, СтруктураНоменклатуры); 
	ПродуктАйко.id   = ИдНоменклатуры;
	ПродуктАйко.eid  = ИдНоменклатуры;
	ПродуктАйко.name = ИмяПродуктаАйко;
	// Заполнение полей пакета
	ТипОбъектаПакетАйко = ФабрикаXDTO.Тип("https://izi.cloud/iikopackage", "args");
	ПакетАйко = ФабрикаXDTO.Создать(ТипОбъектаПакетАйко);
	ПакетАйко.entities_version 				 = ПолучитьВерсиюОбъекта(П);
	ПакетАйко.client_type 					 = "BACK";
	ПакетАйко.enable_warnings 				 = Ложь;
	ПакетАйко.request_watchdog_check_results = Ложь;
	ПакетАйко.product 						 = ПродуктАйко;
	ПакетАйко.overrideFastCode 				 = Истина;
	ПакетАйко.overrideCode 					 = Ложь;
	
	Возврат ПолучитьТекстИзXDTO(ПакетАйко);
КонецФункции

// Возвращает структуру с полями:
// Результат - Истина, если все ок
// Ошибка - если Результат - Ложь, содержит ошибку из XML-ответа Айко
// УидАйко - идентификатор созданного объекта в случае успешного создания
Функция ОбработатьHTTPОтветПриСозданииОбъектаАйко(HTTPОтвет)
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		//ЗаписатьВЛог("Веб-сервер вернул код, отличный от 200 при создании объекта Айко!");
		Возврат Неопределено;	
	КонецЕсли;
	
	XMLОтвета = ОбработкаДанных.РасшифроватьGZIP(HTTPОтвет.ПолучитьТелоКакДвоичныеДанные());
	СтруктураОтвета = Новый Структура;
	ЧтениеXml = Новый ЧтениеXML();
	ЧтениеXml.УстановитьСтроку(XMLОтвета);
		
	Пока ЧтениеXml.Прочитать() Цикл
		Если ЧтениеXml.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Если ЧтениеXml.Имя = "returnValue" Тогда
				ЧтениеXml.Прочитать();
				СтруктураОтвета.Вставить("УидАйко", ЧтениеXml.Значение);
			КонецЕсли;
			Если ЧтениеXml.Имя = "success" Тогда
				ЧтениеXml.Прочитать();
				Если ЧтениеXml.Значение = "true" Тогда
					СтруктураОтвета.Вставить("Результат", Истина);
				Иначе
					СтруктураОтвета.Вставить("Результат", Ложь);
				КонецЕсли;
			КонецЕсли;
			Если ЧтениеXml.Имя = "errorString" Тогда
				ЧтениеXml.Прочитать();
				СтруктураОтвета.Вставить("Ошибка", ЧтениеXml.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ЧтениеXml.Закрыть();
	
	Возврат СтруктураОтвета;
КонецФункции